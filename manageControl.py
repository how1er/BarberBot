import telebot
import datetime
from telebot import types
from db import Barber_list_price, barberFreeTime, takeOrder, columnLists, isFreeOrder, update_mark, History

bot = telebot.TeleBot('2120063146:AAGFdvPdx22l_DvrW4xejLaM7YUNvQwbyAc')


def send_message(chatid, welcome_message, menu=None, markdown=True):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param welcome_message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param menu: –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è
    :param markdown: –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏
    :return: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ True, –∏–Ω–∞—á–µ False
    """
    try:
        if not menu:
            bot.send_message(chatid, welcome_message, parse_mode='Markdown')
        else:
            if markdown:
                bot.send_message(chatid, welcome_message, reply_markup=menu, parse_mode='Markdown')
            else:
                bot.send_message(chatid, welcome_message, reply_markup=menu)
    except Exception as e:
        print(e)
        return False
    else:
        return True


def edit_message(chatid, messageid, new_message, menu=None, markdown=True):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param messageid: id —Å–æ–æ–±—â–µ–Ω–∏—è
    :param new_message: —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :param menu: –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :param markdown: –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏
    :return: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ True, –∏–Ω–∞—á–µ False
    """
    try:
        if not menu:
            bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, parse_mode='Markdown')
        else:
            if markdown:
                bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, reply_markup=menu,
                                      parse_mode='Markdown')
            else:
                bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, reply_markup=menu)
    except Exception as e:
        print(e)
        return False
    else:
        return True


def mainmenu(chatid, message_id=False):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :return:
    """
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='‚úÇ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', callback_data='new_haircut'))
    menu.add(types.InlineKeyboardButton(text='üóí–ò—Å—Ç–æ—Ä–∏—è', callback_data='history'))
    menu.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_welcome'))
    new_message = "_–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_"
    if not message_id:
        send_message(chatid, new_message, menu)
    else:
        edit_message(chatid, message_id, new_message, menu, markdown=True)


def barber_list(chatid, message_id=False):
    """
    –°–ø–∏—Å–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤ —Å –ø—Ä–∞–π—Å–æ–º.
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='–ü—Ä–∞–π—Å-–ª–∏—Å—Ç (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞)', callback_data='price_list'))
    menu.add(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å—É", callback_data='instructions'))
    menu.add(types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='to_main_menu'))
    barbers = Barber_list_price()
    barbers_list_message = ""
    for barberId, BarberName, Price in barbers:
        barbers_list_message += str(BarberName) + ": " + str(Price) + "—Ä." + "\n"
    if not message_id:
        send_message(chatid, barbers_list_message, menu)
    else:
        edit_message(chatid, message_id, barbers_list_message, menu, markdown=True)


def select_barber(chatid, message_id=False):
    """
    –°–ø–∏—Å–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤ (–∫–Ω–æ–ø–∫–∏).
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    barbers = Barber_list_price()
    select_barber_message = "–í—ã–±–µ—Ä–µ—Ç–µ –±–∞—Ä–±–µ—Ä–∞"
    for barberId, BarberName, Price in barbers:
        menu.add(types.InlineKeyboardButton(text=str(BarberName), callback_data='barber_' + str(barberId)))
    menu.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='to_main_menu'))
    if not message_id:
        send_message(chatid, select_barber_message, menu)
    else:
        edit_message(chatid, message_id, select_barber_message, menu, markdown=True)


def select_day(chatid, message_id=False, barber=""):
    """
    –í—ã–±–æ—Ä –¥–Ω—è.
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param barber: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä–∞
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    barberid = barber[-1]
    date = datetime.datetime.today()
    select_time_message = "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏"
    for i in range(7):
        menu.add(types.InlineKeyboardButton(text=str(date.date().strftime('%d/%m')),
                                            callback_data=barberid + "_date_" + date.strftime('%Y-%m-%d')))
        date += datetime.timedelta(days=1)
    menu.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='new_haircut'))
    if not message_id:
        send_message(chatid, select_time_message, menu)
    else:
        edit_message(chatid, message_id, select_time_message, menu, markdown=True)


def select_time(chatid, message_id=False, info=""):
    """
    –°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–Ω–æ–ø–∫–∏).
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param info: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä–∞ –∏ –¥–∞—Ç–∞
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    barberid = int(info[0])
    date = datetime.datetime.strptime(info.split('_')[1], '%Y-%m-%d')
    time = barberFreeTime(barberid, date)
    select_time_message = "–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è"
    for order_time in time:
        dt_value = datetime.datetime.strptime(order_time[0], '%Y-%m-%d %H:%M:%S')
        menu.add(types.InlineKeyboardButton(text=str(dt_value.time().strftime('%H:%M')),
                                            callback_data=info + "_time_" + dt_value.strftime('%H:%M:%S')))
    menu.add(types.InlineKeyboardButton(text='–ö –≤—ã–±–æ—Ä—É –¥–Ω—è', callback_data='barber_' + str(barberid)))
    if not message_id:
        send_message(chatid, select_time_message, menu)
    else:
        edit_message(chatid, message_id, select_time_message, menu, markdown=True)


def new_order(chatid, message_id=False, info=""):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param info: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä–∞ –∏ –≤—Ä–µ–º—è
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    barberid = int(info.split('_')[0])
    time = datetime.datetime.strptime(info.split('_')[1], '%Y-%m-%d %H:%M:%S')
    ord_id = takeOrder(chatid, time, barberid)
    print(ord_id)
    new_order_message = "–ë—Ä–æ–Ω—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
    menu.add(types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='to_waiting_' + str(ord_id)))
    if not message_id:
        send_message(chatid, new_order_message, menu)
    else:
        edit_message(chatid, message_id, new_order_message, menu, markdown=True)


def waiting(chatid, message_id=False, info=""):
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∏–∂–∫–∏.
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param info: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
    :return:
    """

    orderid = int(info.split('_')[0])
    menu = types.InlineKeyboardMarkup()
    new_order_message = "–°—Ç—Ä–∏–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞?"
    menu.add(types.InlineKeyboardButton(text='–î–∞', callback_data='to_mark_' + str(orderid)))
    menu.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='to_waiting_' + str(orderid)))
    if not message_id:
        send_message(chatid, new_order_message, menu)
    else:
        edit_message(chatid, message_id, new_order_message, menu, markdown=True)


def set_mark(chatid, message_id=False, info=""):
    """
    –ü—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏.
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param info: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞—Ä–±–µ—Ä–∞
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    orderid = int(info.split('_')[0])
    new_order_message = "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5"
    for i in range(5):
        menu.add(types.InlineKeyboardButton(text=str(i + 1), callback_data=str(orderid) + '_marked_' + str(i + 1)))
    if not message_id:
        send_message(chatid, new_order_message, menu)
    else:
        edit_message(chatid, message_id, new_order_message, menu, markdown=True)


def add_mark_to_db(chatid, message_id=False, info=""):
    """
    –ü—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤ –±–¥
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param info: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –∏ –æ—Ü–µ–Ω–∫–∞
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    orderid = int(info.split('_')[0])
    mark = int(info.split('_')[1])
    update_mark(orderid, mark)
    columnLists('Orders')
    add_mark_to_db = "–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —Å—Ç—Ä–∏–∂–∫—É. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞."
    menu.add(types.InlineKeyboardButton(text="–ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data='to_main_menu'))
    if not message_id:
        send_message(chatid, add_mark_to_db, menu)
    else:
        edit_message(chatid, message_id, add_mark_to_db, menu, markdown=True)


def history_menu(chatid, message_id=False):
    """
    –í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param message_id: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :return:
    """

    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text="–ö –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data='to_main_menu'))
    history_list = History(chatid)
    history_list_message = ""
    if len(history_list) != 0:
        for barberName, order_time, rating in history_list:
            history_list_message += "–ë–∞—Ä–±–µ—Ä: " + str(barberName) + ", –≤—Ä–µ–º—è: " + str(order_time) + ", –æ—Ü–µ–Ω–∫–∞: " \
                                    + str(rating) + "\n"
    else:
        history_list_message = "–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —Å—Ç—Ä–∏–∂–µ–∫"
    if not message_id:
        send_message(chatid, history_list_message, menu)
    else:
        edit_message(chatid, message_id, history_list_message, menu, markdown=True)


def new_user(chatid, message_id=False):
    """
    –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param chatid: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='–ü—Ä–∞–π—Å-–ª–∏—Å—Ç', callback_data='price_list'))
    menu.add(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å—É", callback_data='instructions'))
    menu.add(types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='to_main_menu'))
    welcome_message = "_–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BarberBot!_"
    if not message_id:
        send_message(chatid, welcome_message, menu)
    else:
        edit_message(chatid, message_id, welcome_message, menu, markdown=True)
